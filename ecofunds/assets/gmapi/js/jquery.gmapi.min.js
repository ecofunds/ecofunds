(function($){function instance(constructor,args){function F(){return constructor.apply(this,args)}F.prototype=constructor.prototype;return new F}function property(path,context){path=path.split(".");if(context=="")context=window;else context=context||window.google.maps;if(path[0]in context)if(path.length>1)return property(path.slice(1).join("."),context[path[0]]);else return context[path[0]];else throw new Error(path[0]+" not found!");}function linkInfo(obj,info){obj.openInfoWindow=function(){if(obj instanceof
google.maps.Marker)info.open(obj.getMap(),obj);else info.open(obj)};obj.closeInfoWindow=function(){info.close()};obj.getInfoWindow=function(){return info};if(obj instanceof google.maps.Marker)info.getMarker=function(){return obj}}function addEvents(obj,events){for(e in events)(function(eventName,handlerName,once){var handler=function(){property(handlerName,window).apply(this,arguments)};if(once)google.maps.event.addListenerOnce(obj,eventName,handler);else google.maps.event.addListener(obj,eventName,
handler)}).apply(this,events[e])}function parse(obj,div){if(obj==="div")return div;if($.isPlainObject(obj)||$.isArray(obj)){if(obj.cls){if(obj.cls=="MarkerClusterer"){obj.arg[0]=$(div).getMap();obj.arg[1]=$(div).getMarkers()}var args=[];if(obj.arg)for(var a in obj.arg)args.push(parse(obj.arg[a],div));var o=instance(property(obj.cls,obj.context),args);if(obj.nfo)linkInfo(o,parse(obj.nfo,div));if(obj.evt)addEvents(o,obj.evt);return o}if(obj.val)return property(obj.val);for(var k in obj)obj[k]=parse(obj[k],
div)}return obj}function toBounds(obj){var bounds=new google.maps.LatLngBounds;if(obj instanceof google.maps.MVCArray||$.isArray(obj)||$.isPlainObject(obj))for(var k in obj)bounds.union(toBounds(obj[k]));else if(obj instanceof google.maps.LatLng)bounds.extend(obj);else if(obj instanceof google.maps.Marker)bounds.extend(obj.getPosition());else if(obj instanceof google.maps.Polyline)bounds.union(toBounds(obj.getPath()));else if(obj instanceof google.maps.Polygon)bounds.union(toBounds(obj.getPaths()));
return bounds}function removeObjects(name){return function(){var div=$(this);var objects=div.data(name);for(var o in objects)objects[o].setMap(null);div.removeData(name)}}function addObjects(name,obj){return function(){if(obj){var div=$(this);var map=div.data("map");var objects=div.data(name)||[];for(var o in obj){var object=parse(obj[o],this);object.setMap(map);objects.push(object)}div.data(name,objects)}}}function fitObjects(name,zoom){return function(){var div=$(this);var map=div.data("map");var objects=
div.data(name);if(map&&objects){var bounds=toBounds(objects);if(zoom>=0){map.setZoom(zoom);map.setCenter(bounds.getCenter())}else map.fitBounds(bounds)}}}var mapxhr=null;$.fn.extend({removeMarkers:function(){return this.each(removeObjects("markers"))},removePolylines:function(){return this.each(removeObjects("polylines"))},removePolygons:function(){return this.each(removeObjects("polygons"))},addMarkers:function(obj){return this.each(addObjects("markers",obj))},addPolylines:function(obj){return this.each(addObjects("polylines",
obj))},addPolygons:function(obj){return this.each(addObjects("polygons",obj))},fitMarkers:function(zoom){return this.each(fitObjects("markers",zoom))},fitPolylines:function(zoom){return this.each(fitObjects("polylines",zoom))},fitPolygons:function(zoom){return this.each(fitObjects("polygons",zoom))},getMarkers:function(){return this.data("markers")},getPolylines:function(){return this.data("polylines")},getCircles:function(){return this.data("circles")},getPolygons:function(){return this.data("polygons")},
getMap:function(){return this.data("map")},applyMap:function(obj){var objects=Array();objects["mkr"]="markers";objects["lbl"]="labels";objects["pln"]="polylines";objects["crl"]="circles";objects["pgn"]="polygons";objects["mkc"]="markersClusterer";return this.each(function(){var div=$(this);for(var k in objects)removeObjects(objects[k]).call(this);div.removeData("map");var map=parse(obj,div.children("div")[0]);div.data("map",map);for(var k in objects)if(obj&&k in obj){addObjects(objects[k],obj[k]).call(this);
if(!map.getCenter())fitObjects(objects[k],map.getZoom()).call(this)}})},initMap:function(sourceURL,data,callback){return this.each(function(){var div=$(this);var mapdiv=div.children("div");if(!sourceURL)sourceURL="/maps/source/"+div.attr("id").replace("id_","");if(mapxhr!=null)mapxhr.abort();mapxhr=$.ajax({async:true,data:data,dataType:"json",url:sourceURL}).done(function(result){if(result){mapdiv.removeClass();div.applyMap(result);var mapimg=div.children("img");google.maps.event.addListenerOnce(div.data("map"),
"tilesloaded",function(){mapimg.css("z-index",-1)})}if($.isFunction(callback))callback()});mapdiv.removeClass();div.applyMap(null)})}})})(jQuery||django.jQuery);